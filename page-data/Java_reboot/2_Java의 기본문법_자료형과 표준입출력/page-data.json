{"componentChunkName":"component---src-templates-blog-post-js","path":"/Java_reboot/2_Java의 기본문법_자료형과 표준입출력/","result":{"data":{"site":{"siteMetadata":{"title":"Blog-Around"}},"markdownRemark":{"id":"22ff4e94-5a46-534f-a76e-bb0e06c34506","excerpt":"Java의 기본문법1: 자료형과 표준 입출력 자바 프로그램의 가장 기본적인 구조는 다음과 같다. import 문장 java.lang을 재외한 모든 패키지를 가져올때는 import…","html":"<h1>Java의 기본문법1: 자료형과 표준 입출력</h1>\n<p>자바 프로그램의 가장 기본적인 구조는 다음과 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Java_EX_01</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>import 문장</h2>\n<p>java.lang을 재외한 모든 패키지를 가져올때는 import 문장을 이용해 가져와야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//입력시 사용하는 유틸리티 패키지를 포함</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token comment\">// util 패키지 안의 모든 class를 본 패키지에 포함</span></code></pre></div>\n<h2>주석</h2>\n<p>다른 언어들과 다르지 않다. 블록주석은 “/**/“이고, 줄 주석은 ”//“으로 처리 할 수 있다.</p>\n<h2>기본 입출력 스트림</h2>\n<p>데이터를 외부로 출력하거나 외부로부터 입력받는 일련의 과정이다.</p>\n<p>표준 입출력 스트림은 다음과 같이 사용할 수 있다.</p>\n<p>출력</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"내용\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//내용</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"내용\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//내용\\n</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//10 c의 printf()와 같이 출력지정자 사용가능</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>err<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"에러는 없습니다.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//에러문구 출력</span></code></pre></div>\n<p>출력필드에는 out, in, err 등이 있는데, System. 안에 static으로 정의 되어있다.</p>\n<p>입력</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">char</span> c<span class=\"token operator\">=</span>system<span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//단 한 문자만을 char형태로 읽어온다.</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">;</span>\n\njava<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span><span class=\"token class-name\">Scanner</span> input<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span><span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Scanner 객체를 사용할 변수에 초기화를 해주어야 함.</span>\n\n<span class=\"token class-name\">String</span> a<span class=\"token operator\">=</span>input<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//다음 공백문자 전까지 string형태로 읽어온다.</span>\n<span class=\"token keyword\">int</span> num<span class=\"token operator\">=</span>input<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// int가 끝날때 까지 읽어온다.</span>\n<span class=\"token keyword\">float</span> num2<span class=\"token operator\">=</span>input<span class=\"token punctuation\">.</span><span class=\"token function\">nextFloat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">String</span> line<span class=\"token operator\">=</span>input<span class=\"token punctuation\">.</span><span class=\"token function\">nextLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//줄을 모두 읽어들여 String으로 반환.</span></code></pre></div>\n<h2>변수</h2>\n<p>프로그램이 수행되는 과정에서 변할 수 있는 값이며 데이터를 기억시킬 수 있는 장소이다.</p>\n<p>여느 c 계열 언어들과 다르지 않다. 단 String 이 원시 타입이 아닌, String 객체라는 점을 기억해야 겠다.</p>\n<h2>casting (형 변환)</h2>\n<p>다음과 같은 꼴로 변환한다. :\n(데이터형) 변수명</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">float</span> a<span class=\"token operator\">=</span><span class=\"token number\">1.233</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> b<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>a<span class=\"token punctuation\">;</span><span class=\"token comment\">//1 명시적 변환 cast연산자 이용</span></code></pre></div>\n<p>묵시적 변환은 따로 explicit 한 문법이 필요 없다. 변환될 자료형의 표현 범위가 변환할 자료형의 표현 범위보다 작을 때, 묵시적 변환이 허용된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">다음과 같은 순서로 가능하다.\n\nbyte-&gt;[short,char]-&gt;int-&gt;long-&gt;float-&gt;double</code></pre></div>\n<h2>연산자</h2>\n<p>연산자란 변수와 상수등 데이터의 개상에 대해 연산동작을 행하는 기호를 뜻한다. 이따 연산의 대상을 피연산자(operand)라고 한다.</p>\n<ol>\n<li>단항연산자</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">int</span> a<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\na<span class=\"token operator\">++</span><span class=\"token comment\">//1</span>\na<span class=\"token operator\">--</span><span class=\"token comment\">//0</span>\n<span class=\"token operator\">++</span>a<span class=\"token comment\">//1</span>\n<span class=\"token operator\">--</span>a<span class=\"token comment\">//0</span>\n<span class=\"token comment\">//전위 후위의 시점 차이가 있음.</span></code></pre></div>\n<ol start=\"2\">\n<li>이항 연산자</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">+, -, /, %</code></pre></div>\n<ol start=\"3\">\n<li>삼항 연산자.</li>\n</ol>\n<p>여느 c계열 언어들과 다르지 않다.</p>","frontmatter":{"title":"Java - 자바의 자료형과 표준 입출력","date":"April 20, 2020","description":"Java의 가장 기초적인 문법 "}}},"pageContext":{"slug":"/Java_reboot/2_Java의 기본문법_자료형과 표준입출력/","previous":{"fields":{"slug":"/Java_reboot/3_Java의 기본문법_제어문, 반복문, 배열객체/"},"frontmatter":{"title":"Java - 자바의 조건문, 반복문, 배열 객체"}},"next":{"fields":{"slug":"/Java_reboot/1_Java의 특징 및 특성/"},"frontmatter":{"title":"Java - 자바의 특징 및 특성"}}}},"staticQueryHashes":["2841359383","916993862"]}
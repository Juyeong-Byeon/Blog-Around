{"componentChunkName":"component---src-templates-blog-post-js","path":"/YDKJS_study/day1_Type/","result":{"data":{"site":{"siteMetadata":{"title":"Blog-Around"}},"markdownRemark":{"id":"cb6238b6-dc0d-5509-9e92-69875d59aad0","excerpt":"타입 자바스크립트는 동적 언어이기 때문에 변수를 선언 할 때, 타입을 명시해주지 않는다. 이러한 부분때문에 자바스크립트에서 타입이 있다는 사실을 간과하기 쉬운데 ECMA…","html":"<h1>타입</h1>\n<p>자바스크립트는 동적 언어이기 때문에 변수를 선언 할 때, 타입을 명시해주지 않는다. 이러한 부분때문에 자바스크립트에서 타입이 있다는 사실을 간과하기 쉬운데 ECMA에서는 다음과 같이 말하고 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">ECMAScript 프로그래머가 언어를 이용하여 직접 조작하는 값들의 타입이 바로 ECAMScript 언어인데, 이 언어 타입에는 Undefined, Null, Boolean,String,Number, Object 가 있다.</code></pre></div>\n<p>여기서 ‘타입’이란 자바스크립트 엔진, 개발자 모두에게 어떠한 값을 다른 값과 분별할 수 있는, 고유한 내부특성의 집합이다.</p>\n<hr>\n<h2>내장 타입</h2>\n<p>자바스크립트에는 7가지 내장 타입이 있다.</p>\n<ol>\n<li>null</li>\n<li>undefined</li>\n<li>boolean</li>\n<li>number</li>\n<li>string</li>\n<li>object</li>\n<li>symbol</li>\n</ol>\n<p>여기서 object를 제외한 타입을 primitive Type 이라고 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">typeof</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">===</span> <span class=\"token string\">\"undefined\"</span> <span class=\"token comment\">//true;</span>\n<span class=\"token keyword\">typeof</span> <span class=\"token boolean\">false</span> <span class=\"token operator\">===</span> <span class=\"token string\">\"boolean\"</span> <span class=\"token comment\">//true;</span>\n<span class=\"token keyword\">typeof</span> <span class=\"token number\">42</span> <span class=\"token operator\">===</span> <span class=\"token string\">\"number\"</span> <span class=\"token comment\">//true;</span>\n<span class=\"token keyword\">typeof</span> <span class=\"token string\">\"42\"</span> <span class=\"token operator\">===</span> <span class=\"token string\">\"string\"</span> <span class=\"token comment\">//true;</span>\n<span class=\"token keyword\">typeof</span> <span class=\"token punctuation\">{</span> a<span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">===</span> <span class=\"token string\">\"object\"</span> <span class=\"token comment\">//true;</span>\n<span class=\"token keyword\">typeof</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token string\">\"symbol\"</span> <span class=\"token comment\">//true;</span>\n<span class=\"token keyword\">typeof</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">===</span> <span class=\"token string\">\"object\"</span> <span class=\"token comment\">//true????????</span></code></pre></div>\n<p><del>null은 falsy 한 유일한 원시값이면서 타입은 object인 특이한 값이다.</del></p>\n<p>인줄 알았지만 MDN에선 falsy 한 값을 다음과 같이 정의 하고 있다.</p>\n<table>\n<thead>\n<tr>\n<th>값</th>\n<th>설명</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>false</td>\n<td>키워드 false</td>\n</tr>\n<tr>\n<td>0</td>\n<td>숫자 zero</td>\n</tr>\n<tr>\n<td>-0</td>\n<td>음수 zero</td>\n</tr>\n<tr>\n<td>0n</td>\n<td>BigInt. 불리언으로 사용될 경우, 숫자와 같은 규칙을 따름. 0n은 거짓 같은 값.</td>\n</tr>\n<tr>\n<td>\"\"</td>\n<td>빈 string</td>\n</tr>\n<tr>\n<td>null</td>\n<td>null - 아무런 값도 없음</td>\n</tr>\n<tr>\n<td>undefined</td>\n<td>undefined - 원시값</td>\n</tr>\n<tr>\n<td>NaN</td>\n<td>NaN - 숫자가 아님</td>\n</tr>\n</tbody>\n</table>\n<p>이 표를 보면 undefined도 falsy한 값이지만 원시값임을 알 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">typeof</span> <span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">===</span> <span class=\"token string\">\"function\"</span> <span class=\"token comment\">//true;</span></code></pre></div>\n<p>function은 object의 하위 타입으로 호출가능한 object이다.\nfunction이 object여서 좋은 점은 내부에 프로퍼티를 둘 수 있다는 것이다.\n예를 들어</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token comment\">//2</span></code></pre></div>\n<p>과 같은 것이 가능 한 것 이다.</p>\n<p>배열또한 같은 이치로</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">typeof</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// \"object\" 임을 알 수 있다.</span></code></pre></div>\n<p>이 또한 object의 하위 타입이다.</p>\n<hr>\n<h2>“값”이 타입을 가진다.</h2>\n<p>여타 언어들과 달리 js에서는 변수에는 타입이 없다. 다만 ‘값’에 타입이 있을 뿐이다.</p>\n<p>따라서 자바트크립트의 변수는 처음에 넣었던 값의 타입과 나중에 넣는 값의 타입이 달라도 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">typeof</span> a <span class=\"token comment\">//\"number\"</span>\n\na <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n<span class=\"token keyword\">typeof</span> a <span class=\"token comment\">//boolean;</span></code></pre></div>\n<p>위와 같이 변수 자체에 타입이 있는 것이 아니라 변수 내부의 “값”에 타입이 있는 것임을 알 수 있다.</p>\n<h2>undefined vs undeclared</h2>\n<p>undefined는 접근 가능한 네임스페이스에 변수가 선언 되었지만 값이 할당되지 않은 것 이고, undeclared는 변수가 아예 선언되지 않은 것이다.\n이 둘은 엄연히 다르다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> t\n<span class=\"token comment\">//undefined</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//VM1861:1 undefined</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//VM1779:1 Uncaught ReferenceError: a is not defined</span></code></pre></div>\n<p>하지만 여기서 조금 이상한 점이 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> a\n<span class=\"token keyword\">typeof</span> a <span class=\"token operator\">===</span> <span class=\"token string\">\"undefined\"</span> <span class=\"token comment\">//true</span>\n<span class=\"token keyword\">typeof</span> k <span class=\"token operator\">===</span> <span class=\"token string\">\"undefined\"</span> <span class=\"token comment\">//true</span></code></pre></div>\n<p>이것은 typeof의 특성이다.</p>\n<p>이러한 특성은 이상해 보일 수 있으나 브라우저에서 여러 스크립트파일의 변수가 전역 네임스페이스를 공유할 때 유용하다.</p>\n<p>한 예로 프로그램의 디버깅모드를 DEBUG 라는 전역 변수플래그로 조정한다고하자. 콘솔창에 메시지 로깅 등 디버깅 작업을 하기전, 이 변수의 선언 여부를 체크해야할 것이다. 최상위 전역 스코프에\nlet DEBUG=true 라고 ‘debug.js’에서 선언하고 이 파일을 브라우저에서 테스트 시에 로딩하면 될 것이다.</p>\n<p>그러나 만약 다른 어플리케이션 코드에서 DEBUG 전역변수를 체크하기 위해서는 다음과 같이 해야한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">DEBUG</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//에러!</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"디버깅 시작\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token constant\">DEBUG</span> <span class=\"token operator\">!==</span> <span class=\"token string\">\"undefined\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//안전하게 체크 가능!</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"디버깅 시작\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>만약 DEBUG 뿐 아니라 내장 api에도 특정 함수나 변수가 있는지 체크하고 싶을땐 위의 방식을 이용해야 한다.</p>\n<p>한 예로는</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"undefined\"</span> <span class=\"token operator\">===</span> <span class=\"token keyword\">typeof</span> foo<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//not defined일 때, undefined 가 된다.</span>\n  <span class=\"token function-variable function\">foo</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>와 같이 전역공간에 같은 네임이 사용되었는지 확인하고 사용할 수 있다.</p>\n<p>만약 이와같이 typeof를 사용하지 않고 전역공간에 특정 object가 있는지 확인하고 싶다면 다음처럼 해도 가능하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span><span class=\"token constant\">DEBUG</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"디버깅을 시작합니다.\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>다만 이러한경우는 브라우저상에서만 가능하고, node.js 등과 같은 환경에서는 불가능 하다.</p>\n<p>그리고 typeof 의 안전장치는 특정 라이브러리를 가져다가 쓸 때도 유용하게 사용할 수 있는데, 다음과 같은 방법들이 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">doSomethingCool</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> helper <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span> funcFoo <span class=\"token operator\">!==</span> <span class=\"token string\">\"undefined\"</span> <span class=\"token operator\">?</span> <span class=\"token function-variable function\">funcFoo</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">let</span> val <span class=\"token operator\">=</span> <span class=\"token function\">helper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위와 같이 funcFoo가 이미 정의되어있으면 그대로 사용하고 정의되어있지 않으면 새로 정의해서 사용하는 패턴을 이용가능하다.</p>\n<p>사실 다음과 같이 “의존성주입” 이라는 방식으로 조금더 간단하게 의존성을 전달할 수도 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">doSomethingCool</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> helper <span class=\"token operator\">=</span> funcFoo <span class=\"token operator\">||</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">let</span> val <span class=\"token operator\">=</span> <span class=\"token function\">helper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"title":"JS - 타입","date":"July 04, 2020","description":"JS의 내장 타입에 대한 이해 "}}},"pageContext":{"slug":"/YDKJS_study/day1_Type/","previous":{"fields":{"slug":"/Java_reboot/2_Java의 기본문법_자료형과 표준입출력/"},"frontmatter":{"title":"Java - 자바의 자료형과 표준 입출력"}},"next":{"fields":{"slug":"/YDKJS_study/day2_Value/"},"frontmatter":{"title":"JS - Value"}}}},"staticQueryHashes":["2841359383","916993862"]}
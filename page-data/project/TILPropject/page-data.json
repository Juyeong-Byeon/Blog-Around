{"componentChunkName":"component---src-templates-blog-post-js","path":"/project/TILPropject/","result":{"data":{"site":{"siteMetadata":{"title":"Blog-Around"}},"markdownRemark":{"id":"8ff90afa-8efb-54b5-a903-7c0bb5f648af","excerpt":"20211007 div등 focus가 일어나지 않는 요소에 focus를 하고 싶다면?\n음의 정숫값(보통 tabindex=“-1”)은 연속 키보드 탐색으로 접근할 수는 없으나 JavaScript…","html":"<h3>20211007</h3>\n<ol>\n<li>\n<p>div등 focus가 일어나지 않는 요소에 focus를 하고 싶다면?\n음의 정숫값(보통 tabindex=“-1”)은 연속 키보드 탐색으로 접근할 수는 없으나 JavaScript나 시각적(마우스 클릭)으로는 포커스 가능함을 뜻함.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">tabidx</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>-1<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n</li>\n<li>\n<p>이미지를 로드해서 바독판 형태로 맵핑 하기<br>\ncanvas를 이용해 이미지를 매핑할 일이 있었다.\n대강 아래 같은느낌.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\">    <span class=\"token keyword\">function</span> <span class=\"token keyword\">async</span> <span class=\"token function\">imageFilter</span><span class=\"token punctuation\">(</span>ctx<span class=\"token operator\">:</span>CanvasRenderingContext2D<span class=\"token punctuation\">,</span>imageSrc<span class=\"token operator\">:</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span>CanvasRenderingContext2D<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>\n\n\n        <span class=\"token keyword\">const</span> loadedImage<span class=\"token operator\">=</span><span class=\"token keyword\">await</span> <span class=\"token punctuation\">(</span>\n            <span class=\"token comment\">//https://stackoverflow.com/questions/46399223/async-await-in-image-loading</span>\n            <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token builtin\">Promise</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> reject<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">let</span> img <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Image</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                    img<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onload</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">)</span>\n                    img<span class=\"token punctuation\">.</span>onerror <span class=\"token operator\">=</span> reject\n                    img<span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> src\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>imageSrc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//https://developer.mozilla.org/ko/docs/Web/API/Canvas_API/Tutorial/Using_images</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                ctx<span class=\"token punctuation\">.</span><span class=\"token function\">drawImage</span><span class=\"token punctuation\">(</span>loadedImage<span class=\"token punctuation\">,</span> j <span class=\"token operator\">*</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> i <span class=\"token operator\">*</span> <span class=\"token number\">38</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">38</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> ctx<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ol>\n<h3>20211012</h3>\n<p>Nominal type system vs Structural type system</p>\n<p>typescript는 Structural type system을 사용한다.</p>\n<p>Structural type system은 구조가 같으면 타입이 같은 것으로 판단한다.\nc#, java 같은 경우는 구조가 같더라도 이름이나, 타입의 관계를 정의해주지 않으면 폴리모피즘 등을 구현할 수 없다.\n즉 ts는 Structural type system을 사용하기 때문에 아래의 코드가 가능한 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Point</span> <span class=\"token punctuation\">{</span>\n  x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n  y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  x<span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n  y<span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">\"point_x\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">printPoint</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">printPoint</span><span class=\"token punctuation\">(</span>point<span class=\"token operator\">:</span> Point<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>point<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>20211013</h3>\n<ol>\n<li>jest</li>\n</ol>\n<p>jest를 이용해 특정 UI를 권한에따라 보여줄지, 보여주지 않을지를 잘 체크하고 있는지 로직을 점검할 일이 었었다.\n그 과정에서 아래 두 함수의 차이를 알아보았다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> vs <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toEqual</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>위 둘의 차이점은 toBe는 reference 비교이고 toEqual은 deep하게 들어가 값을 비교한다는 것이다.\n즉</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> inputArr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"B\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"C\"</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\">//...some code</span>\n\n<span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>inputArr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toEqual</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"B\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"C\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Pass</span>\n<span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>inputArr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toEqual</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"B\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"C\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Fail</span></code></pre></div>\n<ol start=\"2\">\n<li>scroll effect</li>\n</ol>\n<p>apple의 사이트에서 scroll위치에 따라서 에니메이션이 재생되는 이펙트가 있었는데 너무 멋있어보여서 직접 구현해보려고 했는데, 생각보다 성능이 좋지 않았다.\n그런데 개발 없이 이렇게 만들 수 도 있는듯 (apple과 같은 기술)</p>\n<p><a href=\"https://www.youtube.com/watch?v=hY1a94niwpY\">https://www.youtube.com/watch?v=hY1a94niwpY</a></p>","frontmatter":{"title":"TIL","date":"October 07, 2021","description":"매일 매일 배운 내용들을 정리해보자."}}},"pageContext":{"slug":"/project/TILPropject/","previous":{"fields":{"slug":"/web/closure/"},"frontmatter":{"title":"closure"}},"next":null}},"staticQueryHashes":["2841359383","916993862"]}